/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 model-animation.glb --transform 
Files: model-animation.glb [4.73MB] > /Users/waiyanminaung/3d-web/3d-portfolio-app/public/assets/model-animation-transformed.glb [1.28MB] (73%)
*/

import React, { useEffect, type JSX } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { LoopRepeat, type Group, type SkinnedMesh } from "three";

export default function Me(props: JSX.IntrinsicElements["group"]) {
  const group = React.useRef<Group>(null);

  const { scene, animations } = useGLTF(
    "/assets/me-model-transformed.glb",
    true
  );

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(animations, group);

  // Force play the Idle animation
  useEffect(() => {
    const idleAction = actions?.["IdleV4.2(maya_head)"];

    if (idleAction) {
      idleAction.reset().setLoop(LoopRepeat, Infinity).play();
    }

    return () => {
      if (idleAction) {
        idleAction.fadeOut(0.5);
      }
    };
  }, [actions]);

  useEffect(() => {
    return () => {
      Object.values(materials).forEach((material) => material.dispose());
    };
  }, [materials]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Hips} />
        </group>
        <skinnedMesh
          name="avaturn_body"
          geometry={(nodes.avaturn_body as SkinnedMesh).geometry}
          material={materials.avaturn_body_material}
          skeleton={(nodes.avaturn_body as SkinnedMesh).skeleton}
        />
        <skinnedMesh
          name="avaturn_glasses_0"
          geometry={(nodes.avaturn_glasses_0 as SkinnedMesh).geometry}
          material={materials.avaturn_glasses_0_material}
          skeleton={(nodes.avaturn_glasses_0 as SkinnedMesh).skeleton}
        />
        <skinnedMesh
          name="avaturn_glasses_1"
          geometry={(nodes.avaturn_glasses_1 as SkinnedMesh).geometry}
          material={materials.avaturn_glasses_1_material}
          skeleton={(nodes.avaturn_glasses_1 as SkinnedMesh).skeleton}
        />
        <skinnedMesh
          name="avaturn_hair_0"
          geometry={(nodes.avaturn_hair_0 as SkinnedMesh).geometry}
          material={materials.avaturn_hair_0_material}
          skeleton={(nodes.avaturn_hair_0 as SkinnedMesh).skeleton}
        />
        <skinnedMesh
          name="avaturn_shoes_0"
          geometry={(nodes.avaturn_shoes_0 as SkinnedMesh).geometry}
          material={materials.avaturn_shoes_0_material}
          skeleton={(nodes.avaturn_shoes_0 as SkinnedMesh).skeleton}
        />
        <skinnedMesh
          name="avaturn_look_0"
          geometry={(nodes.avaturn_look_0 as SkinnedMesh).geometry}
          material={materials.avaturn_look_0_material}
          skeleton={(nodes.avaturn_look_0 as SkinnedMesh).skeleton}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/assets/me-model-transformed.glb");
